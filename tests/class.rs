use vb6parse::{
    class::{FileUsage, MtsStatus, Persistance, VB6ClassFile},
    language::VB6Token,
};

#[test]
fn artificial_life_organism_class_load() {
    let file_name = "Organism.cls".to_owned();

    let organism_class_bytes = include_bytes!("./data/vb6-code/Artificial-life/Organism.cls");

    let organism_class_result =
        VB6ClassFile::parse(file_name, &mut organism_class_bytes.as_slice());

    assert!(organism_class_result.is_ok());

    let organism_class = organism_class_result.unwrap();

    assert_eq!(organism_class.header.version.major, 1);
    assert_eq!(organism_class.header.version.minor, 0);

    assert_eq!(
        organism_class.header.properties.multi_use,
        FileUsage::MultiUse
    );
    assert_eq!(
        organism_class.header.properties.persistable,
        Persistance::NonPersistable
    );
    assert_eq!(
        organism_class.header.properties.data_binding_behavior,
        false
    );
    assert_eq!(organism_class.header.properties.data_source_behavior, false);
    assert_eq!(
        organism_class.header.properties.mts_transaction_mode,
        MtsStatus::NotAnMTSObject
    );

    assert_eq!(organism_class.header.attributes.name, b"Organism");
    assert_eq!(organism_class.header.attributes.global_name_space, false);
    assert_eq!(organism_class.header.attributes.creatable, true);
    assert_eq!(organism_class.header.attributes.pre_declared_id, false);
    assert_eq!(organism_class.header.attributes.exposed, false);

    let tokens = vec!(
        VB6Token::Comment(b"'***************************************************************************".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'This Organism class gives life to the creatures in the simulation.".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'***************************************************************************".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::OptionKeyword(b"Option".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ExplicitKeyword(b"Explicit".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'As you can imagine, this is the length (in \"nucelotides\") of each creature's \"DNA\"".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PrivateKeyword(b"Private".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ConstKeyword(b"Const".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNALENGTH".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"299".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'A unique identifer for this creature".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"ID".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'The ID number of this creature's parent".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"ParentID".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'The ID number of the original ancestor of this creature".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"AncestralID".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Is the creature currently alive or dead?".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"isAlive".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::BooleanKeyword(b"Boolean".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'An array for the creature's DNA".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PrivateKeyword(b"Private".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNA".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ByteKeyword(b"Byte".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'The creature's current coordinates".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"oX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"oY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"osX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SingleKeyword(b"Single".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"osY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SingleKeyword(b"Single".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Currently selected or not".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Selected".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::BooleanKeyword(b"Boolean".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Next, the values for specific genes".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'(These are determined ONLY at birth)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Radius of the creature".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSize".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Speed of the creature".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSpeed".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SingleKeyword(b"Single".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Eyesight range of the creature (also treated as a radius)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gRange".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Next, creature properties that exist independent of genes.".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'These are changed as the program progresses.".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Energy of the creature".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Energy".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'How many cycles the creature has been alive".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Lifetime".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'The type of our target coordinates (food or a random destination)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"targetType".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'The creature's target coordinates".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"tX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"tY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Loop variables".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::DimKeyword(b"Dim".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"i".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"j".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::DimKeyword(b"Dim".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"x".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"y".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Return the length of this creature's DNA".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::FunctionKeyword(b"Function".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"GetMaxDNA".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"GetMaxDNA".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNALENGTH".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::FunctionKeyword(b"Function".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Return a DNA base at position (pos)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::FunctionKeyword(b"Function".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"GetDNABase".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::ByValKeyword(b"ByVal".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"pos".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ByteKeyword(b"Byte".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"GetDNABase".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNA".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"pos".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::FunctionKeyword(b"Function".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Mutate a base randomly (typically performed just after a creature has been created)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"MutateBase".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Generate a random number between -1 and 1".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::DimKeyword(b"Dim".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Mutate".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"Mutate".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Int".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"Rnd".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::MultiplicationOperator(b"*".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"3".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Select a random base, then apply the mutation to it.".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'(Note that Mutate can have a value of 0, in which case it is an \"inconsequential\" mutation)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::DimKeyword(b"Dim".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"pos".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"pos".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Rnd".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::MultiplicationOperator(b"*".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNALENGTH".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNA".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"pos".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"3".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AndKeyword(b"And".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Mutate".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Mutate".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNA".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"pos".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AndKeyword(b"And".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Mutate".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Mutate".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"DNA".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"pos".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNA".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"pos".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AdditionOperator(b"+".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Mutate".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Two possible methods for creating a new creature:".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'1: Create a creature with random DNA".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"CreateRandom".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Creatures are born with full energy".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"Energy".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"startEnergy".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Give this one random DNA".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"InitializeRandomDNA".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Generate initial values for all genetically-set attributes".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"GetInitialSize".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"GetInitialSpeed".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"GetInitialRange".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'The only time this routine is run is for the initial generation, so".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"' unilaterally set ParentID to -1 (indicative of first generation creatures)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"ParentID".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"AncestralID".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'2: Create a creature from an existing creature (\"reproduction\", of the asexual variety)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"CreateFromCreature".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::ByRefKeyword(b"ByRef".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"srcCreature".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Organism".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Split the parent creature's energy with the child".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"srcCreature".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"Energy".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"srcCreature".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"Energy".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::DivisionOperator(b"/".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"2".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"Energy".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"srcCreature".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"Energy".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"ParentID".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"srcCreature".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"ID".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'If the parent was a member of the founding set of creatures, set".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"' the AncestralID to match the ParentID".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"srcCreature".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"AncestralID".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::VariableName(b"AncestralID".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"srcCreature".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"ID".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::ElseKeyword(b"Else".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::VariableName(b"AncestralID".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"srcCreature".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"AncestralID".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Copy the parent's DNA over to the child".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"InitializeDNAFromCreature".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"srcCreature".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'If mutations are enabled, mutate away!".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::ForKeyword(b"For".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"i".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ToKeyword(b"To".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"numOfMutations".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::VariableName(b"MutateBase".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::NextKeyword(b"Next".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"i".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Generate initial values for all genetically-set attributes".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"GetInitialSize".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"GetInitialSpeed".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"GetInitialRange".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'This routine simply copies one creature's DNA (typically a parent)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"' into another creature (typically a child)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"InitializeDNAFromCreature".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::ByRefKeyword(b"ByRef".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"srcDNA".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Organism".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::ReDimKeyword(b"ReDim".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNA".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ToKeyword(b"To".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNALENGTH".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ByteKeyword(b"Byte".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::ForKeyword(b"For".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"x".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ToKeyword(b"To".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNALENGTH".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::VariableName(b"DNA".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"x".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"srcDNA".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"GetDNABase".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"x".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::NextKeyword(b"Next".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"x".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'This routine generates a random strand of DNA".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"InitializeRandomDNA".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::ReDimKeyword(b"ReDim".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNA".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ToKeyword(b"To".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNALENGTH".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ByteKeyword(b"Byte".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::ForKeyword(b"For".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"x".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ToKeyword(b"To".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNALENGTH".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::VariableName(b"DNA".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"x".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Int".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"Rnd".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::MultiplicationOperator(b"*".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"4".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::NextKeyword(b"Next".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"x".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"\'When a creature is \"born\"...".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PrivateKeyword(b"Private".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Class_Initialize".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"\'Mark the creature as not selected".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"Selected".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::FalseKeyword(b"False".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Mark the creature as alive".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"isAlive".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::TrueKeyword(b"True".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Start counting the number of cycles this creature has lived (0)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"Lifetime".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Set the creature's target type as \"undefined\"".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"targetType".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"tX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"tY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'****************************************************".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'This set of routines calculates values for the creature's attributes (phenotype)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"' based off scanning segments of DNA (genotype)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Creature size".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"GetInitialSize".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::ForKeyword(b"For".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"i".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ToKeyword(b"To".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"49".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNA".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"i".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"3".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSize".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSize".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AdditionOperator(b"+".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::NextKeyword(b"Next".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"i".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Creature speed".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"GetInitialSpeed".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::ForKeyword(b"For".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"i".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"50".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ToKeyword(b"To".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"149".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNA".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"i".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"3".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSpeed".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSpeed".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AdditionOperator(b"+".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::NextKeyword(b"Next".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"i".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'We don't want speed to be too fast, so divide it by 20".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"gSpeed".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSpeed".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::DivisionOperator(b"/".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"20".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"       ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Creature range (how far it can see)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"GetInitialRange".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::ForKeyword(b"For".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"i".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"150".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ToKeyword(b"To".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"199".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DNA".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"i".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"3".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gRange".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gRange".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AdditionOperator(b"+".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::NextKeyword(b"Next".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"i".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Add size to this value (so range is never smaller than the size of the creature)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"gRange".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gRange".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AdditionOperator(b"+".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSize".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'END gene creators".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'************************************************************************".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'This routine will draw the creature onto (PictureBox) at its present coordinates".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"DrawOrganism".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::ByValKeyword(b"ByVal".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"pBox".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"PictureBox".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'If the creature is alive, draw it in blue and red.".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"isAlive".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::VariableName(b"oX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Int".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"osX".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::VariableName(b"oY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Int".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"osY".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::Comment(b"'If the creature is selected, draw it in black.".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Me".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"Selected".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::VariableName(b"pBox".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"Circle".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"oX".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"oY".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gRange".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"RGB".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::VariableName(b"pBox".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"Circle".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"oX".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"oY".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSize".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"RGB".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::ElseKeyword(b"Else".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::VariableName(b"pBox".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"Circle".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"oX".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"oY".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gRange".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"RGB".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::Number(b"255".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::VariableName(b"pBox".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"Circle".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"oX".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"oY".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSize".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"RGB".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"255".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'If it's dead, draw it in light gray".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::ElseKeyword(b"Else".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::Comment(b"'If the creature is selected, draw it in black.".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Me".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"Selected".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::VariableName(b"pBox".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"Circle".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"oX".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"oY".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gRange".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"RGB".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::VariableName(b"pBox".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"Circle".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"oX".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"oY".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSize".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"RGB".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::ElseKeyword(b"Else".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::VariableName(b"pBox".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"Circle".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"oX".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"oY".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gRange".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"RGB".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::Number(b"224".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"224".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"224".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::VariableName(b"pBox".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"Circle".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"oX".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"oY".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSize".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"RGB".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::Number(b"208".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"208".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"208".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'This routine handles the main thought process for this creature".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Brain".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Thinking takes energy...".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"Energy".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Energy".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'If it has no energy, it dies".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"Energy".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LessThanOperator(b"<".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::VariableName(b"Energy".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::VariableName(b"isAlive".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::FalseKeyword(b"False".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'If the creature is still alive, count this cycle".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::ElseKeyword(b"Else".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::VariableName(b"Lifetime".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Lifetime".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AdditionOperator(b"+".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Determine what kind of a target square the creature has (random or food)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"targetType".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::Comment(b"'If it doesn't have a target, scan for food".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::VariableName(b"ScanForFood".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::ElseKeyword(b"Else".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::Comment(b"'Check to see if the target is close enough to evaluate".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"Abs".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"osX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"tX".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LessThanOperator(b"<".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSize".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AndKeyword(b"And".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"Abs".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"osY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"tY".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LessThanOperator(b"<".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSize".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::Comment(b"'Depending on the target type, the creature needs to re-evaluate all options".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::Comment(b"'If the target is food and we've arrived, eat it!".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"targetType".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"                ".into()), // The source file has spaces here, not 4 tabs.
        VB6Token::VariableName(b"Food".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"tX".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"tY".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Whitespace(b"  ".into()),
        VB6Token::Comment(b"'Erase this food from the array".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"                ".into()), // The source file has spaces here, not 4 tabs.
        VB6Token::VariableName(b"SetPixelV".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"frmMain".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"picFood".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"hDC".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"tX".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"tY".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"frmMain".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"picFood".into()),
        VB6Token::PeriodOperator(b".".into()),
        VB6Token::VariableName(b"BackColor".into()),
        VB6Token::Whitespace(b"  ".into()),
        VB6Token::Comment(b"'Remove it from the map, too".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"                ".into()), // The source file has spaces here, not 4 tabs.
        VB6Token::VariableName(b"Energy".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Energy".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AdditionOperator(b"+".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"foodWorth".into()),
        VB6Token::Whitespace(b"  ".into()),
        VB6Token::Comment(b"'Add the food value to this creature's energy".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"                ".into()), // The source file has spaces here, not 4 tabs.
        VB6Token::VariableName(b"targetType".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Whitespace(b"  ".into()),
        VB6Token::Comment(b"'Reset the target type (since it no longer has a target)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"                ".into()), // The source file has spaces here, not 4 tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::Comment(b"'If the target isn't food, it's just a random target - so reset it!".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::ElseKeyword(b"Else".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"                ".into()), // The source file has spaces here, not 4 tabs.
        VB6Token::VariableName(b"targetType".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::Comment(b"'If the target isn't close enough, the creature needs to move closer".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::ElseKeyword(b"Else".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"tY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LessThanOperator(b"<".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"osY".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"                ".into()), // The source file has spaces here, not 4 tabs.
        VB6Token::VariableName(b"osY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"osY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSpeed".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::ElseKeyword(b"Else".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"                ".into()), // The source file has spaces here, not 4 tabs.
        VB6Token::VariableName(b"osY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"osY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AdditionOperator(b"+".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSpeed".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"tX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LessThanOperator(b"<".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"osX".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"                ".into()), // The source file has spaces here, not 4 tabs.
        VB6Token::VariableName(b"osX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"osX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSpeed".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::ElseKeyword(b"Else".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"                ".into()), // The source file has spaces here, not 4 tabs.
        VB6Token::VariableName(b"osX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"osX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AdditionOperator(b"+".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gSpeed".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'This subroutine allows the creature to scan for food within its maximum scan radius".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"' NOTE: The creatures maybe represented as circles, but they actually search in a".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'       square pattern. It's noticeably easier to program than a circular pattern.".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PublicKeyword(b"Public".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"ScanForFood".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'The initial x and y coordinates to search from".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::DimKeyword(b"Dim".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"iX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"iY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'The initial x and y coordinates to search to".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::DimKeyword(b"Dim".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"fX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"fY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Trim search coordinates (don't want them outside the limit of the food array)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"iX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gThan".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"oX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gRange".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"iY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gThan".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"oY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubtractionOperator(b"-".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gRange".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"fX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"lThan".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"WORLDWIDTH".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"oX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AdditionOperator(b"+".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gRange".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::VariableName(b"fY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"lThan".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"WORLDHEIGHT".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"oY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AdditionOperator(b"+".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gRange".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'Search for food".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::ForKeyword(b"For".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"x".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"iX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ToKeyword(b"To".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"fX".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::ForKeyword(b"For".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"y".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"iY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ToKeyword(b"To".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"fY".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::Comment(b"'If the creature finds food...".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Food".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"x".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"y".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"255".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::Comment(b"'Mark the target as being of type \"Food\"".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::VariableName(b"targetType".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::Comment(b"'Remember these x and y coordinates as the new target".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::VariableName(b"tX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"x".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::VariableName(b"tY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"y".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::Comment(b"'Quit searching for food".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"            ".into()), // The source file has spaces here, not 3 tabs.
        VB6Token::GotoKeyword(b"GoTo".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"noMoreSearch".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::NextKeyword(b"Next".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"y".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::NextKeyword(b"Next".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"x".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Come here when searching is over(one way or another)".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::VariableName(b"noMoreSearch".into()),
        VB6Token::ColonOperator(b":".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'If the creature found food, there's nothing more to do".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"targetType".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"1".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::ExitKeyword(b"Exit".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::Comment(b"'If the creature didn't find food, set a random target location and start moving there".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::ElseKeyword(b"Else".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::VariableName(b"targetType".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::Number(b"0".into()),
        VB6Token::Whitespace(b"  ".into()),
        VB6Token::Comment(b"'targetType = 0 denotes a random target".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::VariableName(b"tX".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Rnd".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::MultiplicationOperator(b"*".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"WORLDWIDTH".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"        ".into()), // The source file has spaces here, not 2 tabs.
        VB6Token::VariableName(b"tY".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"Rnd".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::MultiplicationOperator(b"*".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"WORLDHEIGHT".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::SubKeyword(b"Sub".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Returns the smaller of two numbers".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PrivateKeyword(b"Private".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::FunctionKeyword(b"Function".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"lThan".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::ByValKeyword(b"ByVal".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"n1".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ByValKeyword(b"ByVal".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"n2".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"n1".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LessThanOperator(b"<".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"n2".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"lThan".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"n1".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ElseKeyword(b"Else".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"lThan".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"n2".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::FunctionKeyword(b"Function".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Comment(b"'Returns the larger of two numbers".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::PrivateKeyword(b"Private".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::FunctionKeyword(b"Function".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gThan".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::ByValKeyword(b"ByVal".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"n1".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Comma(b",".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ByValKeyword(b"ByVal".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"n2".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::AsKeyword(b"As".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LongKeyword(b"Long".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::Whitespace(b"    ".into()), // The source file has spaces here, not tabs.
        VB6Token::IfKeyword(b"If".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::LeftParanthesis(b"(".into()),
        VB6Token::VariableName(b"n1".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::GreaterThanOperator(b">".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"n2".into()),
        VB6Token::RightParanthesis(b")".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ThenKeyword(b"Then".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gThan".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"n1".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::ElseKeyword(b"Else".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"gThan".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::EqualityOperator(b"=".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::VariableName(b"n2".into()),
        VB6Token::Newline(b"\r\n".into()),
        VB6Token::EndKeyword(b"End".into()),
        VB6Token::Whitespace(b" ".into()),
        VB6Token::FunctionKeyword(b"Function".into()),
        VB6Token::Newline(b"\r\n".into()),
    );

    // assert_eq!(
    //     tokens.len(),
    //     organism_class.tokens.len(),
    //     "Token count mismatch"
    // );

    for (index, token) in tokens.iter().zip(organism_class.tokens.iter()).enumerate() {
        assert_eq!(token.0, token.1, "Token mismatch at token index: {}", index);
    }
}
